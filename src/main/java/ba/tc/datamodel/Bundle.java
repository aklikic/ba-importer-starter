/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ba.tc.datamodel;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Bundle extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3088556117555785815L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Bundle\",\"namespace\":\"ba.tc.datamodel\",\"fields\":[{\"name\":\"bundleId\",\"type\":\"string\"},{\"name\":\"tcId\",\"type\":\"string\"},{\"name\":\"metadata\",\"type\":\"string\"},{\"name\":\"pdfs\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Bundle> ENCODER =
      new BinaryMessageEncoder<Bundle>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Bundle> DECODER =
      new BinaryMessageDecoder<Bundle>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Bundle> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Bundle> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Bundle> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Bundle>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Bundle to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Bundle from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Bundle instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Bundle fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence bundleId;
   private java.lang.CharSequence tcId;
   private java.lang.CharSequence metadata;
   private java.util.List<java.lang.CharSequence> pdfs;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Bundle() {}

  /**
   * All-args constructor.
   * @param bundleId The new value for bundleId
   * @param tcId The new value for tcId
   * @param metadata The new value for metadata
   * @param pdfs The new value for pdfs
   */
  public Bundle(java.lang.CharSequence bundleId, java.lang.CharSequence tcId, java.lang.CharSequence metadata, java.util.List<java.lang.CharSequence> pdfs) {
    this.bundleId = bundleId;
    this.tcId = tcId;
    this.metadata = metadata;
    this.pdfs = pdfs;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return bundleId;
    case 1: return tcId;
    case 2: return metadata;
    case 3: return pdfs;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: bundleId = (java.lang.CharSequence)value$; break;
    case 1: tcId = (java.lang.CharSequence)value$; break;
    case 2: metadata = (java.lang.CharSequence)value$; break;
    case 3: pdfs = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'bundleId' field.
   * @return The value of the 'bundleId' field.
   */
  public java.lang.CharSequence getBundleId() {
    return bundleId;
  }


  /**
   * Sets the value of the 'bundleId' field.
   * @param value the value to set.
   */
  public void setBundleId(java.lang.CharSequence value) {
    this.bundleId = value;
  }

  /**
   * Gets the value of the 'tcId' field.
   * @return The value of the 'tcId' field.
   */
  public java.lang.CharSequence getTcId() {
    return tcId;
  }


  /**
   * Sets the value of the 'tcId' field.
   * @param value the value to set.
   */
  public void setTcId(java.lang.CharSequence value) {
    this.tcId = value;
  }

  /**
   * Gets the value of the 'metadata' field.
   * @return The value of the 'metadata' field.
   */
  public java.lang.CharSequence getMetadata() {
    return metadata;
  }


  /**
   * Sets the value of the 'metadata' field.
   * @param value the value to set.
   */
  public void setMetadata(java.lang.CharSequence value) {
    this.metadata = value;
  }

  /**
   * Gets the value of the 'pdfs' field.
   * @return The value of the 'pdfs' field.
   */
  public java.util.List<java.lang.CharSequence> getPdfs() {
    return pdfs;
  }


  /**
   * Sets the value of the 'pdfs' field.
   * @param value the value to set.
   */
  public void setPdfs(java.util.List<java.lang.CharSequence> value) {
    this.pdfs = value;
  }

  /**
   * Creates a new Bundle RecordBuilder.
   * @return A new Bundle RecordBuilder
   */
  public static ba.tc.datamodel.Bundle.Builder newBuilder() {
    return new ba.tc.datamodel.Bundle.Builder();
  }

  /**
   * Creates a new Bundle RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Bundle RecordBuilder
   */
  public static ba.tc.datamodel.Bundle.Builder newBuilder(ba.tc.datamodel.Bundle.Builder other) {
    if (other == null) {
      return new ba.tc.datamodel.Bundle.Builder();
    } else {
      return new ba.tc.datamodel.Bundle.Builder(other);
    }
  }

  /**
   * Creates a new Bundle RecordBuilder by copying an existing Bundle instance.
   * @param other The existing instance to copy.
   * @return A new Bundle RecordBuilder
   */
  public static ba.tc.datamodel.Bundle.Builder newBuilder(ba.tc.datamodel.Bundle other) {
    if (other == null) {
      return new ba.tc.datamodel.Bundle.Builder();
    } else {
      return new ba.tc.datamodel.Bundle.Builder(other);
    }
  }

  /**
   * RecordBuilder for Bundle instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Bundle>
    implements org.apache.avro.data.RecordBuilder<Bundle> {

    private java.lang.CharSequence bundleId;
    private java.lang.CharSequence tcId;
    private java.lang.CharSequence metadata;
    private java.util.List<java.lang.CharSequence> pdfs;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ba.tc.datamodel.Bundle.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.bundleId)) {
        this.bundleId = data().deepCopy(fields()[0].schema(), other.bundleId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.tcId)) {
        this.tcId = data().deepCopy(fields()[1].schema(), other.tcId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.metadata)) {
        this.metadata = data().deepCopy(fields()[2].schema(), other.metadata);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.pdfs)) {
        this.pdfs = data().deepCopy(fields()[3].schema(), other.pdfs);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Bundle instance
     * @param other The existing instance to copy.
     */
    private Builder(ba.tc.datamodel.Bundle other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.bundleId)) {
        this.bundleId = data().deepCopy(fields()[0].schema(), other.bundleId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tcId)) {
        this.tcId = data().deepCopy(fields()[1].schema(), other.tcId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.metadata)) {
        this.metadata = data().deepCopy(fields()[2].schema(), other.metadata);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.pdfs)) {
        this.pdfs = data().deepCopy(fields()[3].schema(), other.pdfs);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'bundleId' field.
      * @return The value.
      */
    public java.lang.CharSequence getBundleId() {
      return bundleId;
    }


    /**
      * Sets the value of the 'bundleId' field.
      * @param value The value of 'bundleId'.
      * @return This builder.
      */
    public ba.tc.datamodel.Bundle.Builder setBundleId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.bundleId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'bundleId' field has been set.
      * @return True if the 'bundleId' field has been set, false otherwise.
      */
    public boolean hasBundleId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'bundleId' field.
      * @return This builder.
      */
    public ba.tc.datamodel.Bundle.Builder clearBundleId() {
      bundleId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'tcId' field.
      * @return The value.
      */
    public java.lang.CharSequence getTcId() {
      return tcId;
    }


    /**
      * Sets the value of the 'tcId' field.
      * @param value The value of 'tcId'.
      * @return This builder.
      */
    public ba.tc.datamodel.Bundle.Builder setTcId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.tcId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'tcId' field has been set.
      * @return True if the 'tcId' field has been set, false otherwise.
      */
    public boolean hasTcId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'tcId' field.
      * @return This builder.
      */
    public ba.tc.datamodel.Bundle.Builder clearTcId() {
      tcId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'metadata' field.
      * @return The value.
      */
    public java.lang.CharSequence getMetadata() {
      return metadata;
    }


    /**
      * Sets the value of the 'metadata' field.
      * @param value The value of 'metadata'.
      * @return This builder.
      */
    public ba.tc.datamodel.Bundle.Builder setMetadata(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.metadata = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'metadata' field has been set.
      * @return True if the 'metadata' field has been set, false otherwise.
      */
    public boolean hasMetadata() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'metadata' field.
      * @return This builder.
      */
    public ba.tc.datamodel.Bundle.Builder clearMetadata() {
      metadata = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'pdfs' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getPdfs() {
      return pdfs;
    }


    /**
      * Sets the value of the 'pdfs' field.
      * @param value The value of 'pdfs'.
      * @return This builder.
      */
    public ba.tc.datamodel.Bundle.Builder setPdfs(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.pdfs = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'pdfs' field has been set.
      * @return True if the 'pdfs' field has been set, false otherwise.
      */
    public boolean hasPdfs() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'pdfs' field.
      * @return This builder.
      */
    public ba.tc.datamodel.Bundle.Builder clearPdfs() {
      pdfs = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Bundle build() {
      try {
        Bundle record = new Bundle();
        record.bundleId = fieldSetFlags()[0] ? this.bundleId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.tcId = fieldSetFlags()[1] ? this.tcId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.metadata = fieldSetFlags()[2] ? this.metadata : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.pdfs = fieldSetFlags()[3] ? this.pdfs : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Bundle>
    WRITER$ = (org.apache.avro.io.DatumWriter<Bundle>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Bundle>
    READER$ = (org.apache.avro.io.DatumReader<Bundle>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.bundleId);

    out.writeString(this.tcId);

    out.writeString(this.metadata);

    long size0 = this.pdfs.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.pdfs) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.bundleId = in.readString(this.bundleId instanceof Utf8 ? (Utf8)this.bundleId : null);

      this.tcId = in.readString(this.tcId instanceof Utf8 ? (Utf8)this.tcId : null);

      this.metadata = in.readString(this.metadata instanceof Utf8 ? (Utf8)this.metadata : null);

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.pdfs;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("pdfs").schema());
        this.pdfs = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.bundleId = in.readString(this.bundleId instanceof Utf8 ? (Utf8)this.bundleId : null);
          break;

        case 1:
          this.tcId = in.readString(this.tcId instanceof Utf8 ? (Utf8)this.tcId : null);
          break;

        case 2:
          this.metadata = in.readString(this.metadata instanceof Utf8 ? (Utf8)this.metadata : null);
          break;

        case 3:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.pdfs;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("pdfs").schema());
            this.pdfs = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










